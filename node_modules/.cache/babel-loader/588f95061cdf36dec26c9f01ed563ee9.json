{"ast":null,"code":"var _jsxFileName = \"/Users/david/Catapulta/Documents/PotatoProduction/AntDesignTheme/src/components/home/slider.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport image1 from '../../assets/images/advanced-option.jpg';\nimport image2 from '../../assets/images/advanced-option.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst variants = {\n  enter: direction => {\n    return {\n      x: direction > 0 ? 1000 : -1000,\n      opacity: 0\n    };\n  },\n  center: {\n    zIndex: 1,\n    x: 0,\n    opacity: 1\n  },\n  exit: direction => {\n    return {\n      zIndex: 0,\n      x: direction < 0 ? 1000 : -1000,\n      opacity: 0\n    };\n  }\n};\n/**\n * Experimenting with distilling swipe offset and velocity into a single variable, so the\n * less distance a user has swiped, the more velocity they need to register as a swipe.\n * Should accomodate longer swipes and short flicks without having binary checks on\n * just distance thresholds and velocity > 0.\n */\n\nconst swipeConfidenceThreshold = 10000;\n\nconst swipePower = (offset, velocity) => {\n  return Math.abs(offset) * velocity;\n};\n\nexport const Example = () => {\n  _s();\n\n  const [[page, direction], setPage] = useState([0, 0]); // We only have 3 images, but we paginate them absolutely (ie 1, 2, 3, 4, 5...) and\n  // then wrap that within 0-2 to find our image ID in the array below. By passing an\n  // absolute page index as the `motion` component's `key` prop, `AnimatePresence` will\n  // detect it as an entirely new image. So you can infinitely paginate as few as 1 images.\n\n  const imageIndex = wrap(0, images.length, page);\n\n  const paginate = newDirection => {\n    setPage([page + newDirection, newDirection]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AnimatePresence, {\n      initial: false,\n      custom: direction,\n      children: /*#__PURE__*/_jsxDEV(motion.img, {\n        src: images[imageIndex],\n        custom: direction,\n        variants: variants,\n        initial: \"enter\",\n        animate: \"center\",\n        exit: \"exit\",\n        transition: {\n          x: {\n            type: \"spring\",\n            stiffness: 300,\n            damping: 30\n          },\n          opacity: {\n            duration: 0.2\n          }\n        },\n        drag: \"x\",\n        dragConstraints: {\n          left: 0,\n          right: 0\n        },\n        dragElastic: 1,\n        onDragEnd: (e, {\n          offset,\n          velocity\n        }) => {\n          const swipe = swipePower(offset.x, velocity.x);\n\n          if (swipe < -swipeConfidenceThreshold) {\n            paginate(1);\n          } else if (swipe > swipeConfidenceThreshold) {\n            paginate(-1);\n          }\n        }\n      }, page, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"next\",\n      onClick: () => paginate(1),\n      children: \"‣\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"prev\",\n      onClick: () => paginate(-1),\n      children: \"‣\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Example, \"wDm/sR0ENd3hz0xTHLusEYtcOtc=\");\n\n_c = Example;\n\nvar _c;\n\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"sources":["/Users/david/Catapulta/Documents/PotatoProduction/AntDesignTheme/src/components/home/slider.js"],"names":["React","useState","motion","AnimatePresence","image1","image2","variants","enter","direction","x","opacity","center","zIndex","exit","swipeConfidenceThreshold","swipePower","offset","velocity","Math","abs","Example","page","setPage","imageIndex","wrap","images","length","paginate","newDirection","type","stiffness","damping","duration","left","right","e","swipe"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport image1 from '../../assets/images/advanced-option.jpg';\nimport image2 from '../../assets/images/advanced-option.jpg';\n\nconst variants = {\n    enter: (direction: number) => {\n      return {\n        x: direction > 0 ? 1000 : -1000,\n        opacity: 0\n      };\n    },\n    center: {\n      zIndex: 1,\n      x: 0,\n      opacity: 1\n    },\n    exit: (direction: number) => {\n      return {\n        zIndex: 0,\n        x: direction < 0 ? 1000 : -1000,\n        opacity: 0\n      };\n    }\n  };\n  \n  /**\n   * Experimenting with distilling swipe offset and velocity into a single variable, so the\n   * less distance a user has swiped, the more velocity they need to register as a swipe.\n   * Should accomodate longer swipes and short flicks without having binary checks on\n   * just distance thresholds and velocity > 0.\n   */\n  const swipeConfidenceThreshold = 10000;\n  const swipePower = (offset: number, velocity: number) => {\n    return Math.abs(offset) * velocity;\n  };\n  \n  export const Example = () => {\n    const [[page, direction], setPage] = useState([0, 0]);\n  \n    // We only have 3 images, but we paginate them absolutely (ie 1, 2, 3, 4, 5...) and\n    // then wrap that within 0-2 to find our image ID in the array below. By passing an\n    // absolute page index as the `motion` component's `key` prop, `AnimatePresence` will\n    // detect it as an entirely new image. So you can infinitely paginate as few as 1 images.\n    const imageIndex = wrap(0, images.length, page);\n  \n    const paginate = (newDirection: number) => {\n      setPage([page + newDirection, newDirection]);\n    };\n  \n    return (\n      <>\n        <AnimatePresence initial={false} custom={direction}>\n          <motion.img\n            key={page}\n            src={images[imageIndex]}\n            custom={direction}\n            variants={variants}\n            initial=\"enter\"\n            animate=\"center\"\n            exit=\"exit\"\n            transition={{\n              x: { type: \"spring\", stiffness: 300, damping: 30 },\n              opacity: { duration: 0.2 }\n            }}\n            drag=\"x\"\n            dragConstraints={{ left: 0, right: 0 }}\n            dragElastic={1}\n            onDragEnd={(e, { offset, velocity }) => {\n              const swipe = swipePower(offset.x, velocity.x);\n  \n              if (swipe < -swipeConfidenceThreshold) {\n                paginate(1);\n              } else if (swipe > swipeConfidenceThreshold) {\n                paginate(-1);\n              }\n            }}\n          />\n        </AnimatePresence>\n        <div className=\"next\" onClick={() => paginate(1)}>\n          {\"‣\"}\n        </div>\n        <div className=\"prev\" onClick={() => paginate(-1)}>\n          {\"‣\"}\n        </div>\n      </>\n    );\n  };\n  "]},"metadata":{},"sourceType":"module"}