{"ast":null,"code":"var _jsxFileName = \"/Users/david/Catapulta/Documents/PotatoProduction/AntDesignTheme/src/components/home/slider.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport image1 from '../../assets/images/advanced-option.jpg';\nimport image2 from '../../assets/images/clean-design.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst variants = {\n  enter: direction => {\n    return {\n      x: direction > 0 ? 1000 : -1000,\n      opacity: 0\n    };\n  },\n  center: {\n    zIndex: 1,\n    x: 0,\n    opacity: 1\n  },\n  exit: direction => {\n    return {\n      zIndex: 0,\n      x: direction < 0 ? 1000 : -1000,\n      opacity: 0\n    };\n  }\n};\n/**\n * Experimenting with distilling swipe offset and velocity into a single variable, so the\n * less distance a user has swiped, the more velocity they need to register as a swipe.\n * Should accomodate longer swipes and short flicks without having binary checks on\n * just distance thresholds and velocity > 0.\n */\n\nconst swipeConfidenceThreshold = 10000;\n\nconst swipePower = (offset, velocity) => {\n  return Math.abs(offset) * velocity;\n};\n\nexport const Slider = () => {\n  _s();\n\n  const [[page, direction], setPage] = useState([0, 0]); // We only have 3 images, but we paginate them absolutely (ie 1, 2, 3, 4, 5...) and\n  // then wrap that within 0-2 to find our image ID in the array below. By passing an\n  // absolute page index as the `motion` component's `key` prop, `AnimatePresence` will\n  // detect it as an entirely new image. So you can infinitely paginate as few as 1 images.\n\n  const paginate = newDirection => {\n    setPage([page + newDirection, newDirection]);\n  };\n\n  function Slider() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(AnimatePresence, {\n        initial: false,\n        custom: direction,\n        children: /*#__PURE__*/_jsxDEV(motion.img, {\n          src: image1.image2,\n          custom: direction,\n          variants: variants,\n          initial: \"enter\",\n          animate: \"center\",\n          exit: \"exit\",\n          transition: {\n            x: {\n              type: \"spring\",\n              stiffness: 300,\n              damping: 30\n            },\n            opacity: {\n              duration: 0.2\n            }\n          },\n          drag: \"x\",\n          dragConstraints: {\n            left: 0,\n            right: 0\n          },\n          dragElastic: 1,\n          onDragEnd: (e, {\n            offset,\n            velocity\n          }) => {\n            const swipe = swipePower(offset.x, velocity.x);\n\n            if (swipe < -swipeConfidenceThreshold) {\n              paginate(1);\n            } else if (swipe > swipeConfidenceThreshold) {\n              paginate(-1);\n            }\n          }\n        }, page, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"next\",\n        onClick: () => paginate(1),\n        children: \"‣\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prev\",\n        onClick: () => paginate(-1),\n        children: \"‣\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n\n  ;\n};\n\n_s(Slider, \"wDm/sR0ENd3hz0xTHLusEYtcOtc=\");\n\n_c = Slider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Slider\");","map":{"version":3,"sources":["/Users/david/Catapulta/Documents/PotatoProduction/AntDesignTheme/src/components/home/slider.js"],"names":["React","useState","motion","AnimatePresence","image1","image2","variants","enter","direction","x","opacity","center","zIndex","exit","swipeConfidenceThreshold","swipePower","offset","velocity","Math","abs","Slider","page","setPage","paginate","newDirection","type","stiffness","damping","duration","left","right","e","swipe"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport image1 from '../../assets/images/advanced-option.jpg';\nimport image2 from '../../assets/images/clean-design.jpg';\n\n\nconst variants = {\n  enter: (direction: number) => {\n    return {\n      x: direction > 0 ? 1000 : -1000,\n      opacity: 0\n    };\n  },\n  center: {\n    zIndex: 1,\n    x: 0,\n    opacity: 1\n  },\n  exit: (direction: number) => {\n    return {\n      zIndex: 0,\n      x: direction < 0 ? 1000 : -1000,\n      opacity: 0\n    };\n  }\n};\n\n/**\n * Experimenting with distilling swipe offset and velocity into a single variable, so the\n * less distance a user has swiped, the more velocity they need to register as a swipe.\n * Should accomodate longer swipes and short flicks without having binary checks on\n * just distance thresholds and velocity > 0.\n */\nconst swipeConfidenceThreshold = 10000;\nconst swipePower = (offset: number, velocity: number) => {\n  return Math.abs(offset) * velocity;\n};\n\nexport const Slider = () => {\n  const [[page, direction], setPage] = useState([0, 0]);\n\n  // We only have 3 images, but we paginate them absolutely (ie 1, 2, 3, 4, 5...) and\n  // then wrap that within 0-2 to find our image ID in the array below. By passing an\n  // absolute page index as the `motion` component's `key` prop, `AnimatePresence` will\n  // detect it as an entirely new image. So you can infinitely paginate as few as 1 images.\n  \n\n  const paginate = (newDirection: number) => {\n    setPage([page + newDirection, newDirection]);\n  };\n\n  function Slider() {\n  return (\n    <>\n      <AnimatePresence initial={false} custom={direction}>\n        <motion.img\n          key={page}\n          src={image1.image2}\n          custom={direction}\n          variants={variants}\n          initial=\"enter\"\n          animate=\"center\"\n          exit=\"exit\"\n          transition={{\n            x: { type: \"spring\", stiffness: 300, damping: 30 },\n            opacity: { duration: 0.2 }\n          }}\n          drag=\"x\"\n          dragConstraints={{ left: 0, right: 0 }}\n          dragElastic={1}\n          onDragEnd={(e, { offset, velocity }) => {\n            const swipe = swipePower(offset.x, velocity.x);\n\n            if (swipe < -swipeConfidenceThreshold) {\n              paginate(1);\n            } else if (swipe > swipeConfidenceThreshold) {\n              paginate(-1);\n            }\n          }}\n        />\n      </AnimatePresence>\n      <div className=\"next\" onClick={() => paginate(1)}>\n        {\"‣\"}\n      </div>\n      <div className=\"prev\" onClick={() => paginate(-1)}>\n        {\"‣\"}\n      </div>\n    </>\n  );\n};\n\n}\n"]},"metadata":{},"sourceType":"module"}